using System.Collections.Generic;
using System.Linq;
using UnityEngine;

public class PhysicsSimulation : MonoBehaviour
{

    public int maxIterations = 1000;
    SimulatedBody[] simulateBodies;

    public Vector2 forceMinMax;
    public float forceAngleInDegrees;
    public bool randomizeForceAngle;


    List<Rigidbody> generatedRigidbodies;
    List<Collider> generatedColliders;




    [ContextMenu("Run Simulation")]
    public void RunSimulation()
    {
        AutoGenerateComponents();
        simulateBodies = FindObjectsOfType<Rigidbody>().Select(rb => new SimulatedBody(rb, rb.transform.IsChildOf(transform))).ToArray();


        foreach (SimulatedBody body in simulateBodies)
        {
            if (body.isChild)
            {
                float randomForceAmount = Random.Range(forceMinMax.x, forceMinMax.y);
                float forceAngle = ((randomizeForceAngle) ? Random.Range(0, 360) : forceAngleInDegrees) * Mathf.Deg2Rad;
                Vector3 forceDirection = new Vector3(Mathf.Sin(forceAngle), 0, Mathf.Cos(forceAngle));
                body.rigidbody.AddForce(forceDirection * randomForceAmount, ForceMode.Impulse);
            }
        }





        Physics.autoSimulation = false;
        for (int i = 0; i < maxIterations; i++)
        {

            Physics.Simulate(Time.fixedDeltaTime);
            if (simulateBodies.All(body => body.rigidbody.IsSleeping() || !body.isChild))
            {
                print(i);
                break;
            }

        }

        Physics.autoSimulation = true;

        foreach (SimulatedBody body in simulateBodies)
        {
            if (!body.isChild)
            {
                body.Reset();
            }
        }

        RemoveAutoGeneratedComponents();
    }


    void AutoGenerateComponents()
    {
        generatedRigidbodies = new List<Rigidbody>();
        generatedColliders = new List<Collider>();

        foreach (Transform child in transform)
        {
            if (!child.GetComponent<Rigidbody>())
            {
                generatedRigidbodies.Add(child.gameObject.AddComponent<Rigidbody>());
            }

            if (!child.GetComponent<Collider>())
            {
                generatedColliders.Add(child.gameObject.AddComponent<BoxCollider>());
            }


        }
    }


    void RemoveAutoGeneratedComponents()
    {
        foreach (Rigidbody rigidbody in generatedRigidbodies)
        {
            DestroyImmediate(rigidbody);
        }

        foreach (Collider collider in generatedColliders)
        {
            DestroyImmediate(collider);
        }
    }


    [ContextMenu("Reset")]
    public void ResetAllBodies()
    {


        if (simulateBodies != null)
        {
            foreach (SimulatedBody body in simulateBodies)
            {
                body.Reset();
            }
        }

    }


    struct SimulatedBody
    {
        public readonly Rigidbody rigidbody;
        public readonly bool isChild;
        readonly Vector3 originalPosition;
        readonly Quaternion originalRotation;
        readonly Transform transform;

        public SimulatedBody(Rigidbody rigidbody, bool isChild)
        {
            this.rigidbody = rigidbody;
            this.isChild = isChild;
            transform = rigidbody.transform;
            originalPosition = rigidbody.position;
            originalRotation = rigidbody.rotation;
        }

        public void Reset()
        {
            transform.position = originalPosition;
            transform.rotation = originalRotation;

            if (rigidbody != null)
            {
                rigidbody.velocity = Vector3.zero;
                rigidbody.angularVelocity = Vector3.zero;
            }
        }
    }



}
